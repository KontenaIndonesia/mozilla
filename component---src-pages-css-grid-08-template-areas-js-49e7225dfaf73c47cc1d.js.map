{"version":3,"sources":["webpack:///component---src-pages-css-grid-08-template-areas-js-49e7225dfaf73c47cc1d.js","webpack:///./src/pages/css-grid/08-template-areas.js"],"names":["webpackJsonp","228","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","_react","_react2","_Main","_Main2","_CodeBlock","_CodeBlock2","_DevHomework","_DevHomework2","_CodepenLink","_CodepenLink2","_DownloadLink","_DownloadLink2","Tutorial","createElement","className","link","Homework","title","content","currentPageNum","tutorial","homework"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,EAASC,GAEhC,YA4BA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GA1BvFH,EAAQI,YAAa,CCPtB,IAAAE,GAAAL,EAAA,GDWKM,EAAUL,EAAuBI,GCVtCE,EAAAP,EAAA,IDcKQ,EAASP,EAAuBM,GCbrCE,EAAAT,EAAA,IDiBKU,EAAcT,EAAuBQ,GChB1CE,EAAAX,EAAA,IDoBKY,EAAgBX,EAAuBU,GCnB5CE,EAAAb,EAAA,IDuBKc,EAAgBb,EAAuBY,GCtB5CE,EAAAf,EAAA,ID0BKgB,EAAiBf,EAAuBc,GCxBvCE,EAAW,iBACfX,GAAAF,QAAAc,cAAA,WACEZ,EAAAF,QAAAc,cAAA,4BACAZ,EAAAF,QAAAc,cAAA,2LAEuF,IACrFZ,EAAAF,QAAAc,cAAA,mCAHF,QAGuCZ,EAAAF,QAAAc,cAAA,yBAHvC,0JAOAZ,EAAAF,QAAAc,cAAAR,EAAAN,QAAA,4VAiBAE,EAAAF,QAAAc,cAAA,iJAEyCZ,EAAAF,QAAAc,cAAA,mCAFzC,yEAGiDZ,EAAAF,QAAAc,cAAA,yBAHjD,cAKAZ,EAAAF,QAAAc,cAAA,sBACAZ,EAAAF,QAAAc,cAAAR,EAAAN,QAAA,8RAhCF,uBA6CEE,EAAAF,QAAAc,cAAAR,EAAAN,QAAA,uQA2BAE,EAAAF,QAAAc,cAAA,gCACAZ,EAAAF,QAAAc,cAAA,OAAKC,UAAU,eACbb,EAAAF,QAAAc,cAAA,OAAKC,UAAU,iBAAf,UACAb,EAAAF,QAAAc,cAAA,OAAKC,UAAU,kBAAf,WACAb,EAAAF,QAAAc,cAAA,OAAKC,UAAU,oBAAf,aACAb,EAAAF,QAAAc,cAAA,OAAKC,UAAU,oBAAf,aACAb,EAAAF,QAAAc,cAAA,OAAKC,UAAU,oBAAf,aACAb,EAAAF,QAAAc,cAAA,OAAKC,UAAU,iBAAf,WAEFb,EAAAF,QAAAc,cAAAJ,EAAAV,SAAagB,KAAK,sDAIhBC,EAAW,iBACff,GAAAF,QAAAc,cAAAN,EAAAR,SAAakB,MAAM,sCACjBhB,EAAAF,QAAAc,cAAA,4OAG2C,IACzCZ,EAAAF,QAAAc,cAAAF,EAAAZ,SAAcmB,QAAQ,kBAAtB,sCAJF,MDmEHxB,GAAQK,QC1DM,iBAAME,GAAAF,QAAAc,cAAAV,EAAAJ,SAAMoB,eAAgB,EAAGC,SAAUnB,EAAAF,QAAAc,cAACD,EAAD,MAAcS,SAAUpB,EAAAF,QAAAc,cAACG,EAAD,SD8D/EvB,EAAOC,QAAUA,EAAiB","file":"component---src-pages-css-grid-08-template-areas-js-49e7225dfaf73c47cc1d.js","sourcesContent":["webpackJsonp([226360589622867],{\n\n/***/ 228:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _Main = __webpack_require__(17);\n\t\n\tvar _Main2 = _interopRequireDefault(_Main);\n\t\n\tvar _CodeBlock = __webpack_require__(15);\n\t\n\tvar _CodeBlock2 = _interopRequireDefault(_CodeBlock);\n\t\n\tvar _DevHomework = __webpack_require__(12);\n\t\n\tvar _DevHomework2 = _interopRequireDefault(_DevHomework);\n\t\n\tvar _CodepenLink = __webpack_require__(27);\n\t\n\tvar _CodepenLink2 = _interopRequireDefault(_CodepenLink);\n\t\n\tvar _DownloadLink = __webpack_require__(16);\n\t\n\tvar _DownloadLink2 = _interopRequireDefault(_DownloadLink);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar Tutorial = function Tutorial() {\n\t  return _react2.default.createElement(\n\t    'div',\n\t    null,\n\t    _react2.default.createElement(\n\t      'h2',\n\t      null,\n\t      'Template Areas'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'In our previous example, we learned how to create a basic layout by positioning items with grid lines. Another method for positioning items is to use named grid areas with the',\n\t      ' ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'grid-template-areas'\n\t      ),\n\t      ' and ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'grid-area'\n\t      ),\n\t      ' properties. The best way to explain this is with an example. Let\\'s recreate the grid from our previous example with the grid-template-areas property:'\n\t    ),\n\t    _react2.default.createElement(\n\t      _CodeBlock2.default,\n\t      null,\n\t      '\\n.container {\\n  display: grid;\\n  width: 100%;\\n  height: 600px;\\n  grid-template-columns: 200px 1fr 1fr;\\n  grid-template-rows: 80px 1fr 1fr 100px;\\n  grid-gap: 1rem;\\n  grid-template-areas:\\n      \"header header header\"\\n      \"sidebar content-1 content-1\"\\n      \"sidebar content-2 content-3\"\\n      \"footer footer footer\";\\n}\\n      '\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Here we have defined three columns and four rows. Instead of placing each individual item, we can define the entire layout using the ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'grid-template-areas'\n\t      ),\n\t      ' property. We can then assign those areas to each grid item using the ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'grid-area'\n\t      ),\n\t      ' property.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Our HTML:'\n\t    ),\n\t    _react2.default.createElement(\n\t      _CodeBlock2.default,\n\t      null,\n\t      '\\n<div class=\"container\">\\n  <div class=\"header\">header</div>\\n  <div class=\"sidebar\">sidebar</div>\\n  <div class=\"content-1\">Content-1</div>\\n  <div class=\"content-2\">Content-2</div>\\n  <div class=\"content-3\">Content-3</div>\\n  <div class=\"footer\">footer</div>\\n</div>\\n      '\n\t    ),\n\t    'The rest of our CSS:',\n\t    _react2.default.createElement(\n\t      _CodeBlock2.default,\n\t      null,\n\t      '\\n.header {\\n  grid-area: header;\\n}\\n\\n.sidebar {\\n  grid-area: sidebar;\\n}\\n\\n.content-1 {\\n  grid-area: content-1;\\n}\\n\\n.content-2 {\\n  grid-area: content-2;\\n}\\n\\n.content-3 {\\n  grid-area: content-3;\\n}\\n\\n.footer {\\n  grid-area: footer;\\n}\\n      '\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Here is the result:'\n\t    ),\n\t    _react2.default.createElement(\n\t      'div',\n\t      { className: 'container-8' },\n\t      _react2.default.createElement(\n\t        'div',\n\t        { className: 'item header-8' },\n\t        'header'\n\t      ),\n\t      _react2.default.createElement(\n\t        'div',\n\t        { className: 'item sidebar-8' },\n\t        'sidebar'\n\t      ),\n\t      _react2.default.createElement(\n\t        'div',\n\t        { className: 'item content-1-8' },\n\t        'Content-1'\n\t      ),\n\t      _react2.default.createElement(\n\t        'div',\n\t        { className: 'item content-2-8' },\n\t        'Content-2'\n\t      ),\n\t      _react2.default.createElement(\n\t        'div',\n\t        { className: 'item content-3-8' },\n\t        'Content-3'\n\t      ),\n\t      _react2.default.createElement(\n\t        'div',\n\t        { className: 'item footer-8' },\n\t        'footer'\n\t      )\n\t    ),\n\t    _react2.default.createElement(_CodepenLink2.default, { link: 'https://codepen.io/mozilladevelopers/pen/Xejyed' })\n\t  );\n\t};\n\t\n\tvar Homework = function Homework() {\n\t  return _react2.default.createElement(\n\t    _DevHomework2.default,\n\t    { title: 'Firefox DevTools + CSS Grid Layout' },\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Did you know that FireFox DevTools can display the area names? Try it out! Inspect the grid above and open the layout panel. From here you can toggle the overlay grid and the \\'Display Area Names\\' feature. Don\\'t have Firefox?',\n\t      ' ',\n\t      _react2.default.createElement(\n\t        _DownloadLink2.default,\n\t        { content: 'cssgrid-page-8' },\n\t        'Download Firefox Developer Edition'\n\t      ),\n\t      '.'\n\t    )\n\t  );\n\t};\n\t\n\texports.default = function () {\n\t  return _react2.default.createElement(_Main2.default, { currentPageNum: 8, tutorial: _react2.default.createElement(Tutorial, null), homework: _react2.default.createElement(Homework, null) });\n\t};\n\t\n\tmodule.exports = exports['default'];\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-css-grid-08-template-areas-js-49e7225dfaf73c47cc1d.js","import React from 'react';\nimport Main from './components/_Main';\nimport CodeBlock from '../../components/CodeBlock';\nimport DevHomework from '../../components/layout/DevHomework';\nimport CodepenLink from '../../components/CodepenLink';\nimport DownloadLink from '../../components/DownloadLink';\n\nconst Tutorial = () => (\n  <div>\n    <h2>Template Areas</h2>\n    <p>\n      In our previous example, we learned how to create a basic layout by positioning items with\n      grid lines. Another method for positioning items is to use named grid areas with the{' '}\n      <code>grid-template-areas</code> and <code>grid-area</code> properties. The best way to\n      explain this is with an example. Let's recreate the grid from our previous example with the\n      grid-template-areas property:\n    </p>\n    <CodeBlock>\n      {`\n.container {\n  display: grid;\n  width: 100%;\n  height: 600px;\n  grid-template-columns: 200px 1fr 1fr;\n  grid-template-rows: 80px 1fr 1fr 100px;\n  grid-gap: 1rem;\n  grid-template-areas:\n      \"header header header\"\n      \"sidebar content-1 content-1\"\n      \"sidebar content-2 content-3\"\n      \"footer footer footer\";\n}\n      `}\n    </CodeBlock>\n    <p>\n      Here we have defined three columns and four rows. Instead of placing each individual item, we\n      can define the entire layout using the <code>grid-template-areas</code> property. We can then\n      assign those areas to each grid item using the <code>grid-area</code> property.\n    </p>\n    <p>Our HTML:</p>\n    <CodeBlock>\n      {`\n<div class=\"container\">\n  <div class=\"header\">header</div>\n  <div class=\"sidebar\">sidebar</div>\n  <div class=\"content-1\">Content-1</div>\n  <div class=\"content-2\">Content-2</div>\n  <div class=\"content-3\">Content-3</div>\n  <div class=\"footer\">footer</div>\n</div>\n      `}\n    </CodeBlock>\n    The rest of our CSS:\n    <CodeBlock>\n      {`\n.header {\n  grid-area: header;\n}\n\n.sidebar {\n  grid-area: sidebar;\n}\n\n.content-1 {\n  grid-area: content-1;\n}\n\n.content-2 {\n  grid-area: content-2;\n}\n\n.content-3 {\n  grid-area: content-3;\n}\n\n.footer {\n  grid-area: footer;\n}\n      `}\n    </CodeBlock>\n    <p>Here is the result:</p>\n    <div className=\"container-8\">\n      <div className=\"item header-8\">header</div>\n      <div className=\"item sidebar-8\">sidebar</div>\n      <div className=\"item content-1-8\">Content-1</div>\n      <div className=\"item content-2-8\">Content-2</div>\n      <div className=\"item content-3-8\">Content-3</div>\n      <div className=\"item footer-8\">footer</div>\n    </div>\n    <CodepenLink link=\"https://codepen.io/mozilladevelopers/pen/Xejyed\" />\n  </div>\n);\n\nconst Homework = () => (\n  <DevHomework title=\"Firefox DevTools + CSS Grid Layout\">\n    <p>\n      Did you know that FireFox DevTools can display the area names? Try it out! Inspect the grid\n      above and open the layout panel. From here you can toggle the overlay grid and the 'Display\n      Area Names' feature. Don't have Firefox?{' '}\n      <DownloadLink content=\"cssgrid-page-8\">Download Firefox Developer Edition</DownloadLink>.\n    </p>\n  </DevHomework>\n);\n\nexport default () => <Main currentPageNum={8} tutorial={<Tutorial />} homework={<Homework />} />;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/css-grid/08-template-areas.js"],"sourceRoot":""}