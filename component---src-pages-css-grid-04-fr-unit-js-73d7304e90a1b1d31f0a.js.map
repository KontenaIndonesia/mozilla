{"version":3,"sources":["webpack:///component---src-pages-css-grid-04-fr-unit-js-73d7304e90a1b1d31f0a.js","webpack:///./src/pages/css-grid/04-fr-unit.js"],"names":["webpackJsonp","224","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","_react","_react2","_Main","_Main2","_CodeBlock","_CodeBlock2","_DevHomework","_DevHomework2","_CodepenLink","_CodepenLink2","_VideoPlayer","_VideoPlayer2","Tutorial","createElement","videoId","className","link","Homework","title","currentPageNum","tutorial","homework"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,EAASC,GAEhC,YA4BA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GA1BvFH,EAAQI,YAAa,CCPtB,IAAAE,GAAAL,EAAA,GDWKM,EAAUL,EAAuBI,GCVtCE,EAAAP,EAAA,IDcKQ,EAASP,EAAuBM,GCbrCE,EAAAT,EAAA,IDiBKU,EAAcT,EAAuBQ,GChB1CE,EAAAX,EAAA,IDoBKY,EAAgBX,EAAuBU,GCnB5CE,EAAAb,EAAA,IDuBKc,EAAgBb,EAAuBY,GCtB5CE,EAAAf,EAAA,ID0BKgB,EAAgBf,EAAuBc,GCxBtCE,EAAW,iBACfX,GAAAF,QAAAc,cAAA,WACEZ,EAAAF,QAAAc,cAAAF,EAAAZ,SAAae,QAAQ,gBAErBb,EAAAF,QAAAc,cAAA,yBAEAZ,EAAAF,QAAAc,cAAA,4bASAZ,EAAAF,QAAAc,cAAAR,EAAAN,QAAA,mKAYAE,EAAAF,QAAAc,cAAA,mCAEAZ,EAAAF,QAAAc,cAAA,mIAKAZ,EAAAF,QAAAc,cAAAR,EAAAN,QAAA,iLAYAE,EAAAF,QAAAc,cAAA,gCAEAZ,EAAAF,QAAAc,cAAA,OAAKE,UAAU,eACbd,EAAAF,QAAAc,cAAA,OAAKE,UAAU,SACfd,EAAAF,QAAAc,cAAA,OAAKE,UAAU,SACfd,EAAAF,QAAAc,cAAA,OAAKE,UAAU,SACfd,EAAAF,QAAAc,cAAA,OAAKE,UAAU,SACfd,EAAAF,QAAAc,cAAA,OAAKE,UAAU,SACfd,EAAAF,QAAAc,cAAA,OAAKE,UAAU,UAGjBd,EAAAF,QAAAc,cAAAJ,EAAAV,SAAaiB,KAAK,sDAIhBC,EAAW,iBACfhB,GAAAF,QAAAc,cAAAN,EAAAR,SAAamB,MAAM,sCACjBjB,EAAAF,QAAAc,cAAA,kDACwCZ,EAAAF,QAAAc,cAAA,qCADxC,qDAKAZ,EAAAF,QAAAc,cAAAR,EAAAN,QAAA,8DAKAE,EAAAF,QAAAc,cAAA,gLAKAZ,EAAAF,QAAAc,cAAA,wEDqCHnB,GAAQK,QCjCM,iBAAME,GAAAF,QAAAc,cAAAV,EAAAJ,SAAMoB,eAAgB,EAAGC,SAAUnB,EAAAF,QAAAc,cAACD,EAAD,MAAcS,SAAUpB,EAAAF,QAAAc,cAACI,EAAD,SDqC/ExB,EAAOC,QAAUA,EAAiB","file":"component---src-pages-css-grid-04-fr-unit-js-73d7304e90a1b1d31f0a.js","sourcesContent":["webpackJsonp([245946605849590],{\n\n/***/ 224:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _Main = __webpack_require__(17);\n\t\n\tvar _Main2 = _interopRequireDefault(_Main);\n\t\n\tvar _CodeBlock = __webpack_require__(15);\n\t\n\tvar _CodeBlock2 = _interopRequireDefault(_CodeBlock);\n\t\n\tvar _DevHomework = __webpack_require__(12);\n\t\n\tvar _DevHomework2 = _interopRequireDefault(_DevHomework);\n\t\n\tvar _CodepenLink = __webpack_require__(27);\n\t\n\tvar _CodepenLink2 = _interopRequireDefault(_CodepenLink);\n\t\n\tvar _VideoPlayer = __webpack_require__(57);\n\t\n\tvar _VideoPlayer2 = _interopRequireDefault(_VideoPlayer);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar Tutorial = function Tutorial() {\n\t  return _react2.default.createElement(\n\t    'div',\n\t    null,\n\t    _react2.default.createElement(_VideoPlayer2.default, { videoId: 'UeGPNHAADVw' }),\n\t    _react2.default.createElement(\n\t      'h2',\n\t      null,\n\t      'The fr Unit'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'In our first grid, we created columns with a fixed px width. That\\'s great, but it isn\\'t very flexible. Thankfully, CSS Grid Layout introduces a new unit of length called fr, which is short for \\u201Cfraction\\u201D. MDN defines the fr unit as a unit which represents a fraction of the available space in the grid container. If we want to rewrite our previous grid to have three equal-width columns, we could change our CSS to use the fr unit:'\n\t    ),\n\t    _react2.default.createElement(\n\t      _CodeBlock2.default,\n\t      null,\n\t      '\\n.container {\\n  display: grid;\\n  width: 800px;\\n  grid-template-columns: 1fr 1fr 1fr;\\n  grid-template-rows: 150px 150px;\\n  grid-gap: 1rem;\\n}\\n      '\n\t    ),\n\t    _react2.default.createElement(\n\t      'h4',\n\t      null,\n\t      'The repeat() notation'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Handy tip: If you find yourself repeating length units, use the CSS repeat() function. Rewrite the above code like so:'\n\t    ),\n\t    _react2.default.createElement(\n\t      _CodeBlock2.default,\n\t      null,\n\t      '      \\n.container {\\n  display: grid;\\n  width: 800px;\\n  grid-template-columns: repeat(3, 1fr);\\n  grid-template-rows: repeat(2, 150px);\\n  grid-gap: 1rem;\\n}\\n      '\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Here is the result:'\n\t    ),\n\t    _react2.default.createElement(\n\t      'div',\n\t      { className: 'container-4' },\n\t      _react2.default.createElement('div', { className: 'item' }),\n\t      _react2.default.createElement('div', { className: 'item' }),\n\t      _react2.default.createElement('div', { className: 'item' }),\n\t      _react2.default.createElement('div', { className: 'item' }),\n\t      _react2.default.createElement('div', { className: 'item' }),\n\t      _react2.default.createElement('div', { className: 'item' })\n\t    ),\n\t    _react2.default.createElement(_CodepenLink2.default, { link: 'https://codepen.io/mozilladevelopers/pen/eGdQRN' })\n\t  );\n\t};\n\t\n\tvar Homework = function Homework() {\n\t  return _react2.default.createElement(\n\t    _DevHomework2.default,\n\t    { title: 'Firefox DevTools + CSS Grid Layout' },\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Inspect the above grid and change the ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'grid-template-columns'\n\t      ),\n\t      ' property on the grid container to the following:'\n\t    ),\n\t    _react2.default.createElement(\n\t      _CodeBlock2.default,\n\t      null,\n\t      '\\ngrid-template-columns: 10px repeat(2, 1fr);\\n      '\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'What happened? As you can see, you can not only use the repeat() notation for just part of the track listing, but you can also mix units (in this case, px and fr).'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'We will learn more about mixing units in the next section.'\n\t    )\n\t  );\n\t};\n\t\n\texports.default = function () {\n\t  return _react2.default.createElement(_Main2.default, { currentPageNum: 4, tutorial: _react2.default.createElement(Tutorial, null), homework: _react2.default.createElement(Homework, null) });\n\t};\n\t\n\tmodule.exports = exports['default'];\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-css-grid-04-fr-unit-js-73d7304e90a1b1d31f0a.js","import React from 'react';\nimport Main from './components/_Main';\nimport CodeBlock from '../../components/CodeBlock';\nimport DevHomework from '../../components/layout/DevHomework';\nimport CodepenLink from '../../components/CodepenLink';\nimport VideoPlayer from '../../components/VideoPlayer';\n\nconst Tutorial = () => (\n  <div>\n    <VideoPlayer videoId=\"UeGPNHAADVw\" />\n\n    <h2>The fr Unit</h2>\n\n    <p>\n      In our first grid, we created columns with a fixed px width. That's great,\n      but it isn't very flexible. Thankfully, CSS Grid Layout introduces a new\n      unit of length called fr, which is short for “fraction”. MDN defines the\n      fr unit as a unit which represents a fraction of the available space in\n      the grid container. If we want to rewrite our previous grid to have three\n      equal-width columns, we could change our CSS to use the fr unit:\n    </p>\n\n    <CodeBlock>\n      {`\n.container {\n  display: grid;\n  width: 800px;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: 150px 150px;\n  grid-gap: 1rem;\n}\n      `}\n    </CodeBlock>\n\n    <h4>The repeat() notation</h4>\n\n    <p>\n      Handy tip: If you find yourself repeating length units, use the CSS\n      repeat() function. Rewrite the above code like so:\n    </p>\n\n    <CodeBlock>\n      {`      \n.container {\n  display: grid;\n  width: 800px;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(2, 150px);\n  grid-gap: 1rem;\n}\n      `}\n    </CodeBlock>\n\n    <p>Here is the result:</p>\n\n    <div className=\"container-4\">\n      <div className=\"item\" />\n      <div className=\"item\" />\n      <div className=\"item\" />\n      <div className=\"item\" />\n      <div className=\"item\" />\n      <div className=\"item\" />\n    </div>\n\n    <CodepenLink link=\"https://codepen.io/mozilladevelopers/pen/eGdQRN\" />\n  </div>\n);\n\nconst Homework = () => (\n  <DevHomework title=\"Firefox DevTools + CSS Grid Layout\">\n    <p>\n      Inspect the above grid and change the <code>grid-template-columns</code> property on the grid\n      container to the following:\n    </p>\n\n    <CodeBlock>\n      {`\ngrid-template-columns: 10px repeat(2, 1fr);\n      `}\n    </CodeBlock>\n    <p>\n      What happened? As you can see, you can not only use the repeat() notation for just part of the\n      track listing, but you can also mix units (in this case, px and fr).\n    </p>\n\n    <p>We will learn more about mixing units in the next section.</p>\n  </DevHomework>\n);\n\nexport default () => <Main currentPageNum={4} tutorial={<Tutorial />} homework={<Homework />} />;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/css-grid/04-fr-unit.js"],"sourceRoot":""}