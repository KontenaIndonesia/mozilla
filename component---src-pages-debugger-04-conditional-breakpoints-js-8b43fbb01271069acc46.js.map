{"version":3,"sources":["webpack:///component---src-pages-debugger-04-conditional-breakpoints-js-8b43fbb01271069acc46.js","webpack:///./src/pages/debugger/04-conditional-breakpoints.js","webpack:///./src/pages/debugger/img/p4/createbp.gif"],"names":["webpackJsonp","234","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","_react","_react2","_Main","_Main2","_DevHomework","_DevHomework2","_CodeBlock","_CodeBlock2","_ImgCaption","_ImgCaption2","_createbp","_createbp2","Tutorial","createElement","href","target","rel","src","alt","caption","Homework","title","currentPageNum","tutorial","homework","571","p"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,EAASC,GAEhC,YA4BA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GA1BvFH,EAAQI,YAAa,CCPtB,IAAAE,GAAAL,EAAA,GDWKM,EAAUL,EAAuBI,GCVtCE,EAAAP,EAAA,IDcKQ,EAASP,EAAuBM,GCbrCE,EAAAT,EAAA,IDiBKU,EAAgBT,EAAuBQ,GChB5CE,EAAAX,EAAA,IDoBKY,EAAcX,EAAuBU,GCnB1CE,EAAAb,EAAA,IDuBKc,EAAeb,EAAuBY,GCpB3CE,EAAAf,EAAA,KDwBKgB,EAAaf,EAAuBc,GCtBnCE,EAAW,iBACfX,GAAAF,QAAAc,cAAA,WACEZ,EAAAF,QAAAc,cAAA,qCACAZ,EAAAF,QAAAc,cAAA,6ZAQAZ,EAAAF,QAAAc,cAAA,oNAMAZ,EAAAF,QAAAc,cAAA,4HAKAZ,EAAAF,QAAAc,cAAA,SACEZ,EAAAF,QAAAc,cAAA,KACEC,KAAK,8EACLC,OAAO,SACPC,IAAI,uBAHN,+BASFf,EAAAF,QAAAc,cAAA,oEAC0DZ,EAAAF,QAAAc,cAAA,uBAD1D,wGAKAZ,EAAAF,QAAAc,cAAA,mRAMAZ,EAAAF,QAAAc,cAAAJ,EAAAV,SAAYkB,IAAAN,EAAAZ,QAAemB,IAAI,yBAAyBC,QAAQ,sCAEhElB,EAAAF,QAAAc,cAAA,+DAEAZ,EAAAF,QAAAc,cAAAN,EAAAR,QAAA,iDAMAE,EAAAF,QAAAc,cAAA,gBACMZ,EAAAF,QAAAc,cAAA,yBADN,8NAMAZ,EAAAF,QAAAc,cAAA,4FAEMZ,EAAAF,QAAAc,cAAA,2BAFN,OAEkCZ,EAAAF,QAAAc,cAAA,2BAFlC,2BAGSZ,EAAAF,QAAAc,cAAA,yBAHT,2FAOAZ,EAAAF,QAAAc,cAAA,+EACqEZ,EAAAF,QAAAc,cAAA,qBAAmB,IADxF,mDAKAZ,EAAAF,QAAAc,cAAAN,EAAAR,QAAA,mDAMAE,EAAAF,QAAAc,cAAA,yIAEmCZ,EAAAF,QAAAc,cAAA,2BAFnC,8GAQEO,EAAW,iBACfnB,GAAAF,QAAAc,cAAAR,EAAAN,SAAasB,MAAM,6BACjBpB,EAAAF,QAAAc,cAAA,uIAE8BZ,EAAAF,QAAAc,cAAA,wBAF9B,gGAMAZ,EAAAF,QAAAc,cAAAN,EAAAR,QAAA,4TAmBAE,EAAAF,QAAAc,cAAA,wDAC8CZ,EAAAF,QAAAc,cAAA,wBAD9C,4EAKAZ,EAAAF,QAAAc,cAAA,uBACc,IACZZ,EAAAF,QAAAc,cAAA,KACEC,KAAK,mEACLC,OAAO,SACPC,IAAI,uBAHN,kBAFF,qID2FHtB,GAAQK,QC7EM,iBAAME,GAAAF,QAAAc,cAAAV,EAAAJ,SAAMuB,eAAgB,EAAGC,SAAUtB,EAAAF,QAAAc,cAACD,EAAD,MAAcY,SAAUvB,EAAAF,QAAAc,cAACO,EAAD,SDiF/E3B,EAAOC,QAAUA,EAAiB,SAI7B+B,IACA,SAAUhC,EAAQC,EAASC,GElOjCF,EAAAC,QAAAC,EAAA+B,EAAA","file":"component---src-pages-debugger-04-conditional-breakpoints-js-8b43fbb01271069acc46.js","sourcesContent":["webpackJsonp([122775117748054],{\n\n/***/ 234:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _Main = __webpack_require__(44);\n\t\n\tvar _Main2 = _interopRequireDefault(_Main);\n\t\n\tvar _DevHomework = __webpack_require__(12);\n\t\n\tvar _DevHomework2 = _interopRequireDefault(_DevHomework);\n\t\n\tvar _CodeBlock = __webpack_require__(15);\n\t\n\tvar _CodeBlock2 = _interopRequireDefault(_CodeBlock);\n\t\n\tvar _ImgCaption = __webpack_require__(56);\n\t\n\tvar _ImgCaption2 = _interopRequireDefault(_ImgCaption);\n\t\n\tvar _createbp = __webpack_require__(571);\n\t\n\tvar _createbp2 = _interopRequireDefault(_createbp);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar Tutorial = function Tutorial() {\n\t  return _react2.default.createElement(\n\t    'div',\n\t    null,\n\t    _react2.default.createElement(\n\t      'h2',\n\t      null,\n\t      'Conditional Breakpoints'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Breakpoints are a powerful tool for debugging JavaScript code, but what if we have a breakpoint inside a loop, or a function that is constantly being called? It can become tedious to have to constantly be resuming the execution of our code. It would be much better if we could control when a breakpoint is triggered. Lucky for us, Firefox DevTools has a useful feature called conditional breakpoints.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'A conditional breakpoint allows us to associate a condition with a breakpoint. When the program reaches a conditional breakpoint, the debugger pauses only if the condition provided evaluates to true.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'The best way to understand this, is with an example. Open up the to-do app below in a new tab and follow along.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      _react2.default.createElement(\n\t        'a',\n\t        {\n\t          href: 'https://mozilladevelopers.github.io/sample-todo/03-conditional-breakpoints/',\n\t          target: '_blank',\n\t          rel: 'noopener noreferrer'\n\t        },\n\t        'Open to-do app in new tab.'\n\t      )\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'In the first tutorial, we added a breakpoint inside the ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'addTodo'\n\t      ),\n\t      ' function. This breakpoint can be useful, but it will trigger every single time we add a to-do item.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Let\\u2019s say we only want to trigger this breakpoint when the to-do item contains the word \\u201Cturtle\\u201D. We can do this by right clicking on the line number we want to add a breakpoint to (in this case, line 24), and choosing \\u201CAdd Conditional Breakpoint\\u201D from the menu.'\n\t    ),\n\t    _react2.default.createElement(_ImgCaption2.default, { src: _createbp2.default, alt: 'conditional breakpoint', caption: 'Creating a conditional breakpoint' }),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'We can now enter an expression. Try the following:'\n\t    ),\n\t    _react2.default.createElement(\n\t      _CodeBlock2.default,\n\t      null,\n\t      '\\ntitle.indexOf(\"turtle\") != -1;\\n      '\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'The ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'indexOf()'\n\t      ),\n\t      ' method will return -1 if the specified value (in this case, \\u201Cturtle\\u201D) is not found. This means the expression provided to our conditional breakpoint will only evaluate to true if the string contains the word \\u201Cturtle\\u201D.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'We can use any type of expression for a conditional breakpoint. We can even use ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'console.log'\n\t      ),\n\t      '. A ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'console.log'\n\t      ),\n\t      ' expression will return ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'undefined'\n\t      ),\n\t      ' so it won\\u2019t pause execution, but it will still print to the console. Let\\u2019s try it out.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Add a conditional breakpoint on line 68, right after we define the ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'index'\n\t      ),\n\t      ' ',\n\t      'variable. Enter the following as the condition:'\n\t    ),\n\t    _react2.default.createElement(\n\t      _CodeBlock2.default,\n\t      null,\n\t      '\\nconsole.log(items[index].title);\\n      '\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Now, every time we delete an item, the name of that item will be printed to the console. We get all of the benefits of using ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'console.log'\n\t      ),\n\t      ', but we don\\u2019t have to worry about littering our code with lines that we will need to eventually delete.'\n\t    )\n\t  );\n\t};\n\t\n\t// images\n\t\n\t\n\tvar Homework = function Homework() {\n\t  return _react2.default.createElement(\n\t    _DevHomework2.default,\n\t    { title: 'Firefox DevTools: Hot Tip' },\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Occasionally, we may find ourselves wanting to define our breakpoints in our code, rather than in the debugger. If we call ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'debugger'\n\t      ),\n\t      ' from our code, then Firefox Debugger will pause execution at that line. Here is an example:'\n\t    ),\n\t    _react2.default.createElement(\n\t      _CodeBlock2.default,\n\t      null,\n\t      '\\nconst addTodo = (e) => {\\n  debugger;\\n  e.preventDefault();\\n  const title = document.querySelector(\\'.todo__input\\').value;\\n  const todoForm = document.querySelector(\\'.todo__add\\');\\n  const todo = {\\n    title,\\n    done: false,\\n  };\\n\\n  items.push(todo);\\n  saveList();\\n  todoForm.reset();\\n}\\n      '\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Notice how a line has been added that says: ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'debugger'\n\t      ),\n\t      '. This means we do not have to add the breakpoint from Firefox DevTools.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Try it out.',\n\t      ' ',\n\t      _react2.default.createElement(\n\t        'a',\n\t        {\n\t          href: 'https://mozilladevelopers.github.io/sample-todo/code-breakpoint/',\n\t          target: '_blank',\n\t          rel: 'noopener noreferrer'\n\t        },\n\t        'Open this link'\n\t      ),\n\t      ', launch Firefox Debugger, and add a task. Execution will be paused on that line because we defined that breakpoint in our code.'\n\t    )\n\t  );\n\t};\n\t\n\texports.default = function () {\n\t  return _react2.default.createElement(_Main2.default, { currentPageNum: 4, tutorial: _react2.default.createElement(Tutorial, null), homework: _react2.default.createElement(Homework, null) });\n\t};\n\t\n\tmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 571:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"static/createbp.bf4d6f14.gif\";\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-debugger-04-conditional-breakpoints-js-8b43fbb01271069acc46.js","import React from 'react';\nimport Main from './components/_Main';\nimport DevHomework from '../../components/layout/DevHomework';\nimport CodeBlock from '../../components/CodeBlock';\nimport ImgCaption from '../../components/ImgCaption';\n\n// images\nimport createbp from './img/p4/createbp.gif';\n\nconst Tutorial = () => (\n  <div>\n    <h2>Conditional Breakpoints</h2>\n    <p>\n      Breakpoints are a powerful tool for debugging JavaScript code, but what if we have a\n      breakpoint inside a loop, or a function that is constantly being called? It can become tedious\n      to have to constantly be resuming the execution of our code. It would be much better if we\n      could control when a breakpoint is triggered. Lucky for us, Firefox DevTools has a useful\n      feature called conditional breakpoints.\n    </p>\n\n    <p>\n      A conditional breakpoint allows us to associate a condition with a breakpoint. When the\n      program reaches a conditional breakpoint, the debugger pauses only if the condition\n      provided evaluates to true.\n    </p>\n\n    <p>\n      The best way to understand this, is with an example. Open up the to-do app below in a new tab\n      and follow along.\n    </p>\n\n    <p>\n      <a\n        href=\"https://mozilladevelopers.github.io/sample-todo/03-conditional-breakpoints/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Open to-do app in new tab.\n      </a>\n    </p>\n\n    <p>\n      In the first tutorial, we added a breakpoint inside the <code>addTodo</code> function. This\n      breakpoint can be useful, but it will trigger every single time we add a to-do item.\n    </p>\n\n    <p>\n      Let’s say we only want to trigger this breakpoint when the to-do item contains the word\n      “turtle”. We can do this by right clicking on the line number we want to add a breakpoint to\n      (in this case, line 24), and choosing “Add Conditional Breakpoint” from the menu.\n    </p>\n\n    <ImgCaption src={createbp} alt=\"conditional breakpoint\" caption=\"Creating a conditional breakpoint\" />\n\n    <p>We can now enter an expression. Try the following:</p>\n\n    <CodeBlock>\n      {`\ntitle.indexOf(\"turtle\") != -1;\n      `}\n    </CodeBlock>\n\n    <p>\n      The <code>indexOf()</code> method will return -1 if the specified value (in this case,\n      “turtle”) is not found. This means the expression provided to our conditional breakpoint\n      will only evaluate to true if the string contains the word “turtle”.\n    </p>\n\n    <p>\n      We can use any type of expression for a conditional breakpoint. We can even\n      use <code>console.log</code>. A <code>console.log</code> expression will\n      return <code>undefined</code> so it won’t pause execution, but it will still print to\n      the console. Let’s try it out.\n    </p>\n\n    <p>\n      Add a conditional breakpoint on line 68, right after we define the <code>index</code>{' '}\n      variable. Enter the following as the condition:\n    </p>\n\n    <CodeBlock>\n      {`\nconsole.log(items[index].title);\n      `}\n    </CodeBlock>\n\n    <p>\n      Now, every time we delete an item, the name of that item will be printed to the console. We\n      get all of the benefits of using <code>console.log</code>, but we don’t have to worry about\n      littering our code with lines that we will need to eventually delete.\n    </p>\n  </div>\n);\n\nconst Homework = () => (\n  <DevHomework title=\"Firefox DevTools: Hot Tip\">\n    <p>\n      Occasionally, we may find ourselves wanting to define our breakpoints in our code, rather than\n      in the debugger. If we call <code>debugger</code> from our code, then Firefox Debugger will\n      pause execution at that line. Here is an example:\n    </p>\n\n    <CodeBlock>\n      {`\nconst addTodo = (e) => {\n  debugger;\n  e.preventDefault();\n  const title = document.querySelector('.todo__input').value;\n  const todoForm = document.querySelector('.todo__add');\n  const todo = {\n    title,\n    done: false,\n  };\n\n  items.push(todo);\n  saveList();\n  todoForm.reset();\n}\n      `}\n    </CodeBlock>\n\n    <p>\n      Notice how a line has been added that says: <code>debugger</code>. This means we do not have\n      to add the breakpoint from Firefox DevTools.\n    </p>\n\n    <p>\n      Try it out.{' '}\n      <a\n        href=\"https://mozilladevelopers.github.io/sample-todo/code-breakpoint/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Open this link\n      </a>, launch Firefox Debugger, and add a task. Execution will be paused on that line because\n      we defined that breakpoint in our code.\n    </p>\n  </DevHomework>\n);\n\nexport default () => <Main currentPageNum={4} tutorial={<Tutorial />} homework={<Homework />} />;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/debugger/04-conditional-breakpoints.js","module.exports = __webpack_public_path__ + \"static/createbp.bf4d6f14.gif\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/debugger/img/p4/createbp.gif\n// module id = 571\n// module chunks = 122775117748054"],"sourceRoot":""}